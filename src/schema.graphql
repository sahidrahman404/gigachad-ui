directive @goField(
  forceResolver: Boolean
  name: String
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateEquipmentInput is used for create Equipment object.
Input was generated by ent.
"""
input CreateEquipmentInput {
  name: String!
  image: String!
  exerciseIDs: [ID!]
}
"""
CreateExerciseInput is used for create Exercise object.
Input was generated by ent.
"""
input CreateExerciseInput {
  name: String!
  image: String
  howTo: String
  workoutLogIDs: [ID!]
  usersID: ID
  equipmentsID: ID
  musclesGroupsID: ID
  exerciseTypesID: ID
  routineIDs: [ID!]
}
"""
CreateExerciseTypeInput is used for create ExerciseType object.
Input was generated by ent.
"""
input CreateExerciseTypeInput {
  name: String!
  properties: [String!]!
  description: String!
  exerciseIDs: [ID!]
}
"""
CreateMusclesGroupInput is used for create MusclesGroup object.
Input was generated by ent.
"""
input CreateMusclesGroupInput {
  name: String!
  image: String!
  exerciseIDs: [ID!]
}
"""
CreateRoutineInput is used for create Routine object.
Input was generated by ent.
"""
input CreateRoutineInput {
  name: String!
  exerciseIDs: [ID!]
  usersID: ID
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  email: String!
  username: String!
  hashedPassword: String!
  name: String!
  tokenIDs: [ID!]
  exerciseIDs: [ID!]
  routineIDs: [ID!]
  workoutIDs: [ID!]
  workoutLogIDs: [ID!]
}
"""
CreateWorkoutInput is used for create Workout object.
Input was generated by ent.
"""
input CreateWorkoutInput {
  name: String!
  volume: Int!
  reps: Int!
  time: String
  sets: Int!
  image: String
  description: String!
  usersID: ID
  workoutLogIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Equipment implements Node {
  id: ID!
  name: String!
  image: String!
  exercises: [Exercise!]
}
"""
A connection to a list of items.
"""
type EquipmentConnection {
  """
  A list of edges.
  """
  edges: [EquipmentEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type EquipmentEdge {
  """
  The item at the end of the edge.
  """
  node: Equipment
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
EquipmentWhereInput is used for filtering Equipment objects.
Input was generated by ent.
"""
input EquipmentWhereInput {
  not: EquipmentWhereInput
  and: [EquipmentWhereInput!]
  or: [EquipmentWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  image field predicates
  """
  image: String
  imageNEQ: String
  imageIn: [String!]
  imageNotIn: [String!]
  imageGT: String
  imageGTE: String
  imageLT: String
  imageLTE: String
  imageContains: String
  imageHasPrefix: String
  imageHasSuffix: String
  imageEqualFold: String
  imageContainsFold: String
  """
  exercises edge predicates
  """
  hasExercises: Boolean
  hasExercisesWith: [ExerciseWhereInput!]
}
type Exercise implements Node {
  id: ID!
  name: String!
  image: String
  howTo: String
  equipmentID: ID
  musclesGroupID: ID
  exerciseTypeID: ID
  userID: ID
  workoutLogs: [WorkoutLog!]
  users: User
  equipments: Equipment
  musclesGroups: MusclesGroup
  exerciseTypes: ExerciseType
  routines: [Routine!]
  routineExercises: [RoutineExercise!]
}
"""
A connection to a list of items.
"""
type ExerciseConnection {
  """
  A list of edges.
  """
  edges: [ExerciseEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ExerciseEdge {
  """
  The item at the end of the edge.
  """
  node: Exercise
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type ExerciseType implements Node {
  id: ID!
  name: String!
  properties: [String!]!
  description: String!
  exercises: [Exercise!]
}
"""
A connection to a list of items.
"""
type ExerciseTypeConnection {
  """
  A list of edges.
  """
  edges: [ExerciseTypeEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ExerciseTypeEdge {
  """
  The item at the end of the edge.
  """
  node: ExerciseType
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
ExerciseTypeWhereInput is used for filtering ExerciseType objects.
Input was generated by ent.
"""
input ExerciseTypeWhereInput {
  not: ExerciseTypeWhereInput
  and: [ExerciseTypeWhereInput!]
  or: [ExerciseTypeWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  exercises edge predicates
  """
  hasExercises: Boolean
  hasExercisesWith: [ExerciseWhereInput!]
}
"""
ExerciseWhereInput is used for filtering Exercise objects.
Input was generated by ent.
"""
input ExerciseWhereInput {
  not: ExerciseWhereInput
  and: [ExerciseWhereInput!]
  or: [ExerciseWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  image field predicates
  """
  image: String
  imageNEQ: String
  imageIn: [String!]
  imageNotIn: [String!]
  imageGT: String
  imageGTE: String
  imageLT: String
  imageLTE: String
  imageContains: String
  imageHasPrefix: String
  imageHasSuffix: String
  imageIsNil: Boolean
  imageNotNil: Boolean
  imageEqualFold: String
  imageContainsFold: String
  """
  how_to field predicates
  """
  howTo: String
  howToNEQ: String
  howToIn: [String!]
  howToNotIn: [String!]
  howToGT: String
  howToGTE: String
  howToLT: String
  howToLTE: String
  howToContains: String
  howToHasPrefix: String
  howToHasSuffix: String
  howToIsNil: Boolean
  howToNotNil: Boolean
  howToEqualFold: String
  howToContainsFold: String
  """
  equipment_id field predicates
  """
  equipmentID: ID
  equipmentIDNEQ: ID
  equipmentIDIn: [ID!]
  equipmentIDNotIn: [ID!]
  equipmentIDGT: ID
  equipmentIDGTE: ID
  equipmentIDLT: ID
  equipmentIDLTE: ID
  equipmentIDContains: ID
  equipmentIDHasPrefix: ID
  equipmentIDHasSuffix: ID
  equipmentIDIsNil: Boolean
  equipmentIDNotNil: Boolean
  equipmentIDEqualFold: ID
  equipmentIDContainsFold: ID
  """
  muscles_group_id field predicates
  """
  musclesGroupID: ID
  musclesGroupIDNEQ: ID
  musclesGroupIDIn: [ID!]
  musclesGroupIDNotIn: [ID!]
  musclesGroupIDGT: ID
  musclesGroupIDGTE: ID
  musclesGroupIDLT: ID
  musclesGroupIDLTE: ID
  musclesGroupIDContains: ID
  musclesGroupIDHasPrefix: ID
  musclesGroupIDHasSuffix: ID
  musclesGroupIDIsNil: Boolean
  musclesGroupIDNotNil: Boolean
  musclesGroupIDEqualFold: ID
  musclesGroupIDContainsFold: ID
  """
  exercise_type_id field predicates
  """
  exerciseTypeID: ID
  exerciseTypeIDNEQ: ID
  exerciseTypeIDIn: [ID!]
  exerciseTypeIDNotIn: [ID!]
  exerciseTypeIDGT: ID
  exerciseTypeIDGTE: ID
  exerciseTypeIDLT: ID
  exerciseTypeIDLTE: ID
  exerciseTypeIDContains: ID
  exerciseTypeIDHasPrefix: ID
  exerciseTypeIDHasSuffix: ID
  exerciseTypeIDIsNil: Boolean
  exerciseTypeIDNotNil: Boolean
  exerciseTypeIDEqualFold: ID
  exerciseTypeIDContainsFold: ID
  """
  user_id field predicates
  """
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  userIDContains: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  userIDEqualFold: ID
  userIDContainsFold: ID
  """
  workout_logs edge predicates
  """
  hasWorkoutLogs: Boolean
  hasWorkoutLogsWith: [WorkoutLogWhereInput!]
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """
  equipments edge predicates
  """
  hasEquipments: Boolean
  hasEquipmentsWith: [EquipmentWhereInput!]
  """
  muscles_groups edge predicates
  """
  hasMusclesGroups: Boolean
  hasMusclesGroupsWith: [MusclesGroupWhereInput!]
  """
  exercise_types edge predicates
  """
  hasExerciseTypes: Boolean
  hasExerciseTypesWith: [ExerciseTypeWhereInput!]
  """
  routines edge predicates
  """
  hasRoutines: Boolean
  hasRoutinesWith: [RoutineWhereInput!]
  """
  routine_exercises edge predicates
  """
  hasRoutineExercises: Boolean
  hasRoutineExercisesWith: [RoutineExerciseWhereInput!]
}
type MusclesGroup implements Node {
  id: ID!
  name: String!
  image: String!
  exercises: [Exercise!]
}
"""
A connection to a list of items.
"""
type MusclesGroupConnection {
  """
  A list of edges.
  """
  edges: [MusclesGroupEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type MusclesGroupEdge {
  """
  The item at the end of the edge.
  """
  node: MusclesGroup
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
MusclesGroupWhereInput is used for filtering MusclesGroup objects.
Input was generated by ent.
"""
input MusclesGroupWhereInput {
  not: MusclesGroupWhereInput
  and: [MusclesGroupWhereInput!]
  or: [MusclesGroupWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  image field predicates
  """
  image: String
  imageNEQ: String
  imageIn: [String!]
  imageNotIn: [String!]
  imageGT: String
  imageGTE: String
  imageLT: String
  imageLTE: String
  imageContains: String
  imageHasPrefix: String
  imageHasSuffix: String
  imageEqualFold: String
  imageContainsFold: String
  """
  exercises edge predicates
  """
  hasExercises: Boolean
  hasExercisesWith: [ExerciseWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node
  @goModel(model: "github.com/sahidrahman404/gigachad-api/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  equipmentSlice(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for EquipmentSlice returned from the connection.
    """
    where: EquipmentWhereInput
  ): EquipmentConnection!
  exercises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Exercises returned from the connection.
    """
    where: ExerciseWhereInput
  ): ExerciseConnection!
  exerciseTypes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for ExerciseTypes returned from the connection.
    """
    where: ExerciseTypeWhereInput
  ): ExerciseTypeConnection!
  musclesGroups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for MusclesGroups returned from the connection.
    """
    where: MusclesGroupWhereInput
  ): MusclesGroupConnection!
  routines(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Routines returned from the connection.
    """
    where: RoutineWhereInput
  ): RoutineConnection!
  routineExercises(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for RoutineExercises returned from the connection.
    """
    where: RoutineExerciseWhereInput
  ): RoutineExerciseConnection!
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
  workouts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Workouts returned from the connection.
    """
    where: WorkoutWhereInput
  ): WorkoutConnection!
  workoutLogs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for WorkoutLogs returned from the connection.
    """
    where: WorkoutLogWhereInput
  ): WorkoutLogConnection!
}
type Routine implements Node {
  id: ID!
  name: String!
  userID: ID
  exercises: [Exercise!]
  users: User
  routineExercises: [RoutineExercise!]
}
"""
A connection to a list of items.
"""
type RoutineConnection {
  """
  A list of edges.
  """
  edges: [RoutineEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type RoutineEdge {
  """
  The item at the end of the edge.
  """
  node: Routine
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type RoutineExercise implements Node {
  id: ID!
  restTimer: String
  sets: [Set!]!
  routineID: ID!
  exerciseID: ID!
  userID: ID
  routines: Routine!
  exercises: Exercise!
  users: User
}
"""
A connection to a list of items.
"""
type RoutineExerciseConnection {
  """
  A list of edges.
  """
  edges: [RoutineExerciseEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type RoutineExerciseEdge {
  """
  The item at the end of the edge.
  """
  node: RoutineExercise
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
RoutineExerciseWhereInput is used for filtering RoutineExercise objects.
Input was generated by ent.
"""
input RoutineExerciseWhereInput {
  not: RoutineExerciseWhereInput
  and: [RoutineExerciseWhereInput!]
  or: [RoutineExerciseWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  rest_timer field predicates
  """
  restTimer: String
  restTimerNEQ: String
  restTimerIn: [String!]
  restTimerNotIn: [String!]
  restTimerGT: String
  restTimerGTE: String
  restTimerLT: String
  restTimerLTE: String
  restTimerContains: String
  restTimerHasPrefix: String
  restTimerHasSuffix: String
  restTimerIsNil: Boolean
  restTimerNotNil: Boolean
  restTimerEqualFold: String
  restTimerContainsFold: String
}
"""
RoutineWhereInput is used for filtering Routine objects.
Input was generated by ent.
"""
input RoutineWhereInput {
  not: RoutineWhereInput
  and: [RoutineWhereInput!]
  or: [RoutineWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  user_id field predicates
  """
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  userIDContains: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  userIDEqualFold: ID
  userIDContainsFold: ID
  """
  exercises edge predicates
  """
  hasExercises: Boolean
  hasExercisesWith: [ExerciseWhereInput!]
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """
  routine_exercises edge predicates
  """
  hasRoutineExercises: Boolean
  hasRoutineExercisesWith: [RoutineExerciseWhereInput!]
}
type Token implements Node {
  id: ID!
  expiry: String!
  scope: String!
  userID: ID
  users: User
}
"""
TokenWhereInput is used for filtering Token objects.
Input was generated by ent.
"""
input TokenWhereInput {
  not: TokenWhereInput
  and: [TokenWhereInput!]
  or: [TokenWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  expiry field predicates
  """
  expiry: String
  expiryNEQ: String
  expiryIn: [String!]
  expiryNotIn: [String!]
  expiryGT: String
  expiryGTE: String
  expiryLT: String
  expiryLTE: String
  expiryContains: String
  expiryHasPrefix: String
  expiryHasSuffix: String
  expiryEqualFold: String
  expiryContainsFold: String
  """
  scope field predicates
  """
  scope: String
  scopeNEQ: String
  scopeIn: [String!]
  scopeNotIn: [String!]
  scopeGT: String
  scopeGTE: String
  scopeLT: String
  scopeLTE: String
  scopeContains: String
  scopeHasPrefix: String
  scopeHasSuffix: String
  scopeEqualFold: String
  scopeContainsFold: String
  """
  user_id field predicates
  """
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  userIDContains: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  userIDEqualFold: ID
  userIDContainsFold: ID
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
}
"""
UpdateEquipmentInput is used for update Equipment object.
Input was generated by ent.
"""
input UpdateEquipmentInput {
  name: String
  image: String
  addExerciseIDs: [ID!]
  removeExerciseIDs: [ID!]
  clearExercises: Boolean
}
"""
UpdateExerciseInput is used for update Exercise object.
Input was generated by ent.
"""
input UpdateExerciseInput {
  name: String
  image: String
  clearImage: Boolean
  howTo: String
  clearHowTo: Boolean
  addWorkoutLogIDs: [ID!]
  removeWorkoutLogIDs: [ID!]
  clearWorkoutLogs: Boolean
  usersID: ID
  clearUsers: Boolean
  equipmentsID: ID
  clearEquipments: Boolean
  musclesGroupsID: ID
  clearMusclesGroups: Boolean
  exerciseTypesID: ID
  clearExerciseTypes: Boolean
  addRoutineIDs: [ID!]
  removeRoutineIDs: [ID!]
  clearRoutines: Boolean
}
"""
UpdateExerciseTypeInput is used for update ExerciseType object.
Input was generated by ent.
"""
input UpdateExerciseTypeInput {
  name: String
  properties: [String!]
  appendProperties: [String!]
  description: String
  addExerciseIDs: [ID!]
  removeExerciseIDs: [ID!]
  clearExercises: Boolean
}
"""
UpdateMusclesGroupInput is used for update MusclesGroup object.
Input was generated by ent.
"""
input UpdateMusclesGroupInput {
  name: String
  image: String
  addExerciseIDs: [ID!]
  removeExerciseIDs: [ID!]
  clearExercises: Boolean
}
"""
UpdateRoutineInput is used for update Routine object.
Input was generated by ent.
"""
input UpdateRoutineInput {
  name: String
  addExerciseIDs: [ID!]
  removeExerciseIDs: [ID!]
  clearExercises: Boolean
  usersID: ID
  clearUsers: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  email: String
  username: String
  hashedPassword: String
  name: String
  addTokenIDs: [ID!]
  removeTokenIDs: [ID!]
  clearTokens: Boolean
  addExerciseIDs: [ID!]
  removeExerciseIDs: [ID!]
  clearExercises: Boolean
  addRoutineIDs: [ID!]
  removeRoutineIDs: [ID!]
  clearRoutines: Boolean
  addWorkoutIDs: [ID!]
  removeWorkoutIDs: [ID!]
  clearWorkouts: Boolean
  addWorkoutLogIDs: [ID!]
  removeWorkoutLogIDs: [ID!]
  clearWorkoutLogs: Boolean
}
"""
UpdateWorkoutInput is used for update Workout object.
Input was generated by ent.
"""
input UpdateWorkoutInput {
  name: String
  volume: Int
  reps: Int
  time: String
  clearTime: Boolean
  sets: Int
  image: String
  clearImage: Boolean
  description: String
  usersID: ID
  clearUsers: Boolean
  addWorkoutLogIDs: [ID!]
  removeWorkoutLogIDs: [ID!]
  clearWorkoutLogs: Boolean
}
type User implements Node {
  id: ID!
  email: String!
  username: String!
  name: String!
  createdAt: String!
  activated: Int!
  version: Int!
  tokens: [Token!]
  exercises: [Exercise!]
  routines: [Routine!]
  workouts: [Workout!]
  workoutLogs: [WorkoutLog!]
  routineExercises: [RoutineExercise!]
}
"""
A connection to a list of items.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  username field predicates
  """
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  created_at field predicates
  """
  createdAt: String
  createdAtNEQ: String
  createdAtIn: [String!]
  createdAtNotIn: [String!]
  createdAtGT: String
  createdAtGTE: String
  createdAtLT: String
  createdAtLTE: String
  createdAtContains: String
  createdAtHasPrefix: String
  createdAtHasSuffix: String
  createdAtEqualFold: String
  createdAtContainsFold: String
  """
  activated field predicates
  """
  activated: Int
  activatedNEQ: Int
  activatedIn: [Int!]
  activatedNotIn: [Int!]
  activatedGT: Int
  activatedGTE: Int
  activatedLT: Int
  activatedLTE: Int
  """
  version field predicates
  """
  version: Int
  versionNEQ: Int
  versionIn: [Int!]
  versionNotIn: [Int!]
  versionGT: Int
  versionGTE: Int
  versionLT: Int
  versionLTE: Int
  """
  tokens edge predicates
  """
  hasTokens: Boolean
  hasTokensWith: [TokenWhereInput!]
  """
  exercises edge predicates
  """
  hasExercises: Boolean
  hasExercisesWith: [ExerciseWhereInput!]
  """
  routines edge predicates
  """
  hasRoutines: Boolean
  hasRoutinesWith: [RoutineWhereInput!]
  """
  workouts edge predicates
  """
  hasWorkouts: Boolean
  hasWorkoutsWith: [WorkoutWhereInput!]
  """
  workout_logs edge predicates
  """
  hasWorkoutLogs: Boolean
  hasWorkoutLogsWith: [WorkoutLogWhereInput!]
  """
  routine_exercises edge predicates
  """
  hasRoutineExercises: Boolean
  hasRoutineExercisesWith: [RoutineExerciseWhereInput!]
}
type Workout implements Node {
  id: ID!
  name: String!
  volume: Int!
  reps: Int!
  time: String
  sets: Int!
  createdAt: String!
  image: String
  description: String!
  userID: ID
  users: User
  workoutLogs: [WorkoutLog!]
}
"""
A connection to a list of items.
"""
type WorkoutConnection {
  """
  A list of edges.
  """
  edges: [WorkoutEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type WorkoutEdge {
  """
  The item at the end of the edge.
  """
  node: Workout
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type WorkoutLog implements Node {
  id: ID!
  sets: [Set!]!
  createdAt: String!
  exerciseID: ID
  workoutID: ID
  userID: ID
  users: User
  exercises: Exercise
  workouts: Workout
}
"""
A connection to a list of items.
"""
type WorkoutLogConnection {
  """
  A list of edges.
  """
  edges: [WorkoutLogEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type WorkoutLogEdge {
  """
  The item at the end of the edge.
  """
  node: WorkoutLog
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
WorkoutLogWhereInput is used for filtering WorkoutLog objects.
Input was generated by ent.
"""
input WorkoutLogWhereInput {
  not: WorkoutLogWhereInput
  and: [WorkoutLogWhereInput!]
  or: [WorkoutLogWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: String
  createdAtNEQ: String
  createdAtIn: [String!]
  createdAtNotIn: [String!]
  createdAtGT: String
  createdAtGTE: String
  createdAtLT: String
  createdAtLTE: String
  createdAtContains: String
  createdAtHasPrefix: String
  createdAtHasSuffix: String
  createdAtEqualFold: String
  createdAtContainsFold: String
  """
  exercise_id field predicates
  """
  exerciseID: ID
  exerciseIDNEQ: ID
  exerciseIDIn: [ID!]
  exerciseIDNotIn: [ID!]
  exerciseIDGT: ID
  exerciseIDGTE: ID
  exerciseIDLT: ID
  exerciseIDLTE: ID
  exerciseIDContains: ID
  exerciseIDHasPrefix: ID
  exerciseIDHasSuffix: ID
  exerciseIDIsNil: Boolean
  exerciseIDNotNil: Boolean
  exerciseIDEqualFold: ID
  exerciseIDContainsFold: ID
  """
  workout_id field predicates
  """
  workoutID: ID
  workoutIDNEQ: ID
  workoutIDIn: [ID!]
  workoutIDNotIn: [ID!]
  workoutIDGT: ID
  workoutIDGTE: ID
  workoutIDLT: ID
  workoutIDLTE: ID
  workoutIDContains: ID
  workoutIDHasPrefix: ID
  workoutIDHasSuffix: ID
  workoutIDIsNil: Boolean
  workoutIDNotNil: Boolean
  workoutIDEqualFold: ID
  workoutIDContainsFold: ID
  """
  user_id field predicates
  """
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  userIDContains: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  userIDEqualFold: ID
  userIDContainsFold: ID
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """
  exercises edge predicates
  """
  hasExercises: Boolean
  hasExercisesWith: [ExerciseWhereInput!]
  """
  workouts edge predicates
  """
  hasWorkouts: Boolean
  hasWorkoutsWith: [WorkoutWhereInput!]
}
"""
WorkoutWhereInput is used for filtering Workout objects.
Input was generated by ent.
"""
input WorkoutWhereInput {
  not: WorkoutWhereInput
  and: [WorkoutWhereInput!]
  or: [WorkoutWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  volume field predicates
  """
  volume: Int
  volumeNEQ: Int
  volumeIn: [Int!]
  volumeNotIn: [Int!]
  volumeGT: Int
  volumeGTE: Int
  volumeLT: Int
  volumeLTE: Int
  """
  reps field predicates
  """
  reps: Int
  repsNEQ: Int
  repsIn: [Int!]
  repsNotIn: [Int!]
  repsGT: Int
  repsGTE: Int
  repsLT: Int
  repsLTE: Int
  """
  time field predicates
  """
  time: String
  timeNEQ: String
  timeIn: [String!]
  timeNotIn: [String!]
  timeGT: String
  timeGTE: String
  timeLT: String
  timeLTE: String
  timeContains: String
  timeHasPrefix: String
  timeHasSuffix: String
  timeIsNil: Boolean
  timeNotNil: Boolean
  timeEqualFold: String
  timeContainsFold: String
  """
  sets field predicates
  """
  sets: Int
  setsNEQ: Int
  setsIn: [Int!]
  setsNotIn: [Int!]
  setsGT: Int
  setsGTE: Int
  setsLT: Int
  setsLTE: Int
  """
  created_at field predicates
  """
  createdAt: String
  createdAtNEQ: String
  createdAtIn: [String!]
  createdAtNotIn: [String!]
  createdAtGT: String
  createdAtGTE: String
  createdAtLT: String
  createdAtLTE: String
  createdAtContains: String
  createdAtHasPrefix: String
  createdAtHasSuffix: String
  createdAtEqualFold: String
  createdAtContainsFold: String
  """
  image field predicates
  """
  image: String
  imageNEQ: String
  imageIn: [String!]
  imageNotIn: [String!]
  imageGT: String
  imageGTE: String
  imageLT: String
  imageLTE: String
  imageContains: String
  imageHasPrefix: String
  imageHasSuffix: String
  imageIsNil: Boolean
  imageNotNil: Boolean
  imageEqualFold: String
  imageContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  user_id field predicates
  """
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  userIDContains: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  userIDEqualFold: ID
  userIDContainsFold: ID
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """
  workout_logs edge predicates
  """
  hasWorkoutLogs: Boolean
  hasWorkoutLogsWith: [WorkoutLogWhereInput!]
}

input ActivateUserInput {
  tokenPlainText: String!
}

input ResetUserPasswordInput {
  password: String!
  tokenPlainText: String!
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  activateUser(input: ActivateUserInput!): User!
  updateUserPassword(input: ResetUserPasswordInput!): String
}

input LoginInput {
  email: String!
  password: String!
}

input ActivationTokenInput {
  email: String!
}

input ResetPasswordInput {
  email: String!
}

extend type Mutation {
  createAuthenticationToken(input: LoginInput!): String
  createActivationToken(input: ActivationTokenInput!): String
  createPasswordResetToken(input: ResetPasswordInput!): String
}

type Set {
  Set: Int!
  Reps: Int
  Kg: Int
  Time: String
  Km: Int
}

input SetInput {
  Set: Int!
  Reps: Int
  Kg: Int
  Time: String
  Km: Int
}

input CreateRoutineExerciseInput {
  restTimer: String
  sets: [SetInput!]!
  routineID: ID!
  exerciseID: ID!
  userID: ID
}

extend type Mutation {
  CreateRoutineExercise(input: CreateRoutineExerciseInput!): RoutineExercise
}

input CreateWorkoutLogInput {
  sets: [SetInput!]!
  exerciseID: ID
  workoutID: ID
  userID: ID
}

extend type Mutation {
  CreateWorkoutLog(input: CreateWorkoutLogInput!): WorkoutLog
}
